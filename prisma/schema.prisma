// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  age       Int?
  height    Int?
  weight    Int?
  sex       String?
  password  String
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  workoutTemplates WorkoutTemplate[]
  userWorkouts     UserWorkout[]

  @@map("profiles")
}

model Exercise {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  muscleGroups     MuscleGroup[]
  videoUrl         String?
  imageUrl         String?
  recommendedSets  Int?           @default(4)
  recommendedReps  String?        @default("8-12")
  difficulty       String?        @default("Intermediate") // Beginner, Intermediate, Advanced
  equipment        String?        // Barbell, Dumbbell, Bodyweight, Machine, etc.
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Relations
  workoutExercises WorkoutExercise[]
  templateExercises TemplateExercise[]
}

model WorkoutTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  trainerId   String   @map("trainer_id") @db.ObjectId
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  trainer           Profile            @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  templateExercises TemplateExercise[]
  userWorkouts      UserWorkout[]

  @@map("workout_templates")
}

model TemplateExercise {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  templateId String @map("template_id") @db.ObjectId
  exerciseId String @map("exercise_id") @db.ObjectId
  sets       Int
  reps       Int
  orderIndex Int    @map("order_index")

  // Relations
  template WorkoutTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  exercise Exercise        @relation(fields: [exerciseId], references: [id])

  @@map("template_exercises")
}

model UserWorkout {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @map("user_id") @db.ObjectId
  templateId String?   @map("template_id") @db.ObjectId
  date       DateTime  @default(now())
  notes      String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  user             Profile           @relation(fields: [userId], references: [id], onDelete: Cascade)
  template         WorkoutTemplate?  @relation(fields: [templateId], references: [id])
  workoutExercises WorkoutExercise[]

  @@map("user_workouts")
}

enum Role {
  CLIENT
  TRAINER
  ADMIN
}

enum MuscleGroup {
  CHEST
  BACK
  SHOULDERS
  BICEPS
  TRICEPS
  LEGS
  GLUTES
  CORE
  CARDIO
}

model WorkoutExercise {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  workoutId  String   @map("workout_id") @db.ObjectId
  exerciseId String   @map("exercise_id") @db.ObjectId
  sets       Int
  reps       Int
  weight     Float?
  notes      String?
  orderIndex Int      @map("order_index")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  workout  UserWorkout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise    @relation(fields: [exerciseId], references: [id])

  @@map("workout_exercises")
}
